<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Verificación de Permiso — Clon</title>
  <style>
    :root{--bg:#f2f4f7;--card:#fff;--brand:#0b61a4;--muted:#606470}
    *{box-sizing:border-box}
    body{font-family:Inter,system-ui,Segoe UI,Roboto,Arial;line-height:1.4;background:var(--bg);margin:0;padding:32px;}
    .container{max-width:760px;margin:24px auto;padding:28px;background:var(--card);border-radius:12px;box-shadow:0 6px 20px rgba(15,23,42,0.08)}
    header{display:flex;gap:16px;align-items:center}
    .logo{width:84px;height:48px;background:linear-gradient(180deg,#0b61a4,#0a4f86);border-radius:6px;display:flex;align-items:center;justify-content:center;color:#fff;font-weight:700}
    h1{font-size:18px;margin:0;color:#102a43}
    p.lead{color:var(--muted);margin:6px 0 20px}

    form .row{display:flex;gap:12px}
    label{display:block;font-size:13px;margin-bottom:8px;color:#223}
    input[type=text]{width:100%;padding:12px;border:1px solid #e4e7eb;border-radius:8px;font-size:15px}
    .actions{display:flex;gap:12px;align-items:center;margin-top:14px}
    button{background:var(--brand);color:#fff;border:none;padding:10px 16px;border-radius:8px;font-weight:600;cursor:pointer}
    button.secondary{background:#eef3f8;color:var(--brand);border:1px solid #d7e6f6}

    .result{margin-top:20px;padding:14px;border-radius:8px;background:#f8fafc;border:1px solid #e6eef7}
    .result.success{border-color:#cfeedd;background:#f0fffb}
    .result.error{border-color:#ffd6d6;background:#fff5f5}
    footer{margin-top:18px;font-size:13px;color:var(--muted)}

    @media (max-width:600px){body{padding:16px}.container{padding:18px}}
  </style>
</head>
<body>
  <div class="container" role="main">
    <header>
      <div class="logo">PF</div>
      <div>
        <h1>Verificación de Permiso</h1>
        <p class="lead">Introduce el folio o referencia para validar el permiso.</p>
      </div>
    </header>

    <form id="validaForm" aria-label="Formulario de validación">
      <div style="margin-top:18px">
        <label for="folio">Folio / Referencia</label>
        <input id="folio" name="folio" type="text" inputmode="numeric" placeholder="Ej. 175028557" required />
      </div>

      <div class="actions">
        <button id="btnValida" type="submit">Validar</button>
        <button id="btnLimpiar" type="button" class="secondary">Limpiar</button>
        <div style="margin-left:auto;color:var(--muted);font-size:13px">Servicio: clon local</div>
      </div>
    </form>

    <div id="resultado" class="result" hidden aria-live="polite"></div>

    <footer>
      <small>Este archivo es un clon de interfaz para pruebas. No realiza llamadas reales a servicios externos a menos que configures la variable <code>API_ENDPOINT</code> en el script.</small>
    </footer>
  </div>

  <script>
    /*
      INSTRUCCIONES RÁPIDAS:
      - Para conectar al endpoint real (si tienes permiso), cambia API_ENDPOINT por la URL del servicio y ajusta el método/params según corresponda.
      - Por defecto este clon simula una respuesta para evitar llamadas externas.
    */

    const API_ENDPOINT = null; // p.ej. 'https://www.pagafacil.gob.mx/pagafacilv2/epago/cv/valida_permiso.php'
    const form = document.getElementById('validaForm');
    const input = document.getElementById('folio');
    const resultado = document.getElementById('resultado');
    const btnLimpiar = document.getElementById('btnLimpiar');

    function mostrar(msg, type = 'info'){
      resultado.hidden = false;
      resultado.className = 'result ' + (type === 'success' ? 'success' : (type === 'error' ? 'error' : ''));
      resultado.innerHTML = msg;
    }

    function limpiarResultado(){ resultado.hidden = true; resultado.className = 'result'; resultado.textContent = ''; }

    btnLimpiar.addEventListener('click', () => { form.reset(); limpiarResultado(); input.focus(); });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      limpiarResultado();
      const folio = input.value.trim();
      if(!folio){ mostrar('Por favor ingresa un folio o referencia.', 'error'); return; }

      mostrar('Validando, por favor espera...');
      try{
        if(API_ENDPOINT){
          // Ejemplo: petición POST, ajustar según API real
          const params = new URLSearchParams();
          params.append('f', folio);
          const resp = await fetch(API_ENDPOINT, { method: 'POST', body: params });
          if(!resp.ok) throw new Error('Error de red: ' + resp.status);
          const text = await resp.text();
          // Dependiendo de la respuesta real puede venir HTML o JSON. Aquí solo mostramos el texto bruto.
          mostrar('<strong>Respuesta del servidor:</strong><br><pre style="white-space:pre-wrap">' + escapeHtml(text) + '</pre>', 'success');
        } else {
          // Simulación local: respuesta de ejemplo
          await delay(700);
          if(/^\d{6,12}$/.test(folio)){
            mostrar('<strong>Permiso válido</strong><br>Folio: ' + escapeHtml(folio) + '<br>Estado: <em>Autorizado</em>', 'success');
          } else {
            mostrar('<strong>Permiso no encontrado</strong><br>Revisa el folio e intenta de nuevo.', 'error');
          }
        }
      }catch(err){
        mostrar('<strong>Error:</strong> ' + escapeHtml(err.message), 'error');
      }
    });

    function delay(ms){ return new Promise(res=>setTimeout(res, ms)); }
    function escapeHtml(s){ return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); }
  </script>
</body>
</html>
